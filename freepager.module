<?php

/**
 * @file
 * Some basic function for Free pager. Mostly implementations of Views hooks.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\freepager\Plugin\views\display\Freepager;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
 * Removes all HTML comments as well as trailing newlines etc. from a string.
 *
 * @param string $content
 *   The string with potential HTML comments.
 *
 * @return string
 *   The cleaned up string.
 */
function _freepager_remove_html_comments($content) {
  return trim(preg_replace('/<!--(.|\s)*?-->/', '', $content));
}
/**
 * Implements hook_preprocess_HOOK().
 */
function freepager_preprocess_views_freepager(&$vars) {
  // Let's get some of the data we will need.
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $vars['view'];

  if (count($view->result) <= 1) {
    $view->result = [];
    return;
  }

  $fields = array_keys(Freepager::pagerSettings());
  /** @var string[] $field_names */
  $field_names = array_map(function ($field) use ($view) {
    return $view->display_handler->getOption($field);
  }, array_combine($fields, $fields));
  $current_url = Url::fromRoute('<current>', [], ['alias' => TRUE, 'path_processing' => FALSE]);
  $current_url_string = $current_url->toString();

  // Let's go see if we're looking at a page matching the provided paths.
  $row_number = -1;
  foreach ($view->result as $row => $result) {
    $rendered_fields = _freepager_render_views_row($view, $row, $field_names['path']);
    // When twig debug mode is active, the rendered field output contains the
    // HTML comments from the twig debug mode. In order to still be able to
    // compare the paths, we strip HTML comments from it.
    if (_freepager_remove_html_comments($rendered_fields[$field_names['path']]) == $current_url_string) {
      $row_number = $row;
      break;
    }
  }

  // If no hit is found, set a flag and quit.
  if ($row_number == -1) {
    $view->display_handler->noPathMatch = TRUE;
    return;
  }

  $count = count($view->result);
   $params = \Drupal::request()->query->all();
  // Build the 'previous' item.
  if ($field_names['previous']) {
    $previous_row_number = ($row_number - 1);
    // Loop the 'previous' index, if the pager is set to loop.
    if ($previous_row_number < 0 && $view->display_handler->getOption('loop')) {
      $previous_row_number += $count;
    }

    if ($previous_row_number >= 0) {
      $previous_rendered_fields = _freepager_render_views_row($view, $previous_row_number);
      $vars['previous'] = $previous_rendered_fields[$field_names['previous']];
      $vars['previous_linked'] = Link::fromTextAndUrl($vars['previous'], Url::fromUri('base:/' . $previous_rendered_fields[$field_names['path']], ['query'=> $params, 'attributes' => ['rel' => 'prev']]));
    }
  }

  // Build the 'current' item.
  if ($field_names['current']) {
    $rendered_fields = _freepager_render_views_row($view, $row_number);
    $vars['current'] = $rendered_fields[$field_names['current']];
    $vars['current_linked'] = Link::fromTextAndUrl($vars['current'], Url::fromUri('base:/' . $rendered_fields[$field_names['path']], ['query'=> $params]));
  }

  // Build the 'next' item.
  if ($field_names['next']) {
    $next_row_number = $row_number + 1;
    // Loop the 'next' index, if the pager is set to loop.
    if ($next_row_number >= $count && $view->display_handler->getOption('loop')) {
      $next_row_number -= $count;
    }

    if ($next_row_number < $count) {
      $next_rendered_fields = _freepager_render_views_row($view, $next_row_number);
      $vars['next'] = $next_rendered_fields[$field_names['next']];
      $vars['next_linked'] = Link::fromTextAndUrl($vars['next'], Url::fromUri('base:/' . $next_rendered_fields[$field_names['path']], ['query'=> $params, 'attributes' => ['rel' => 'next']]));
    }
  }

  // Set two other items that might be used by the theme template.
  $vars['row_number'] = $row_number;
  $vars['total_rows'] = $count;

// This is commented out, while waiting for a better solution (and jQuery
// implementation that follows coding standards. See
// http://drupal.org/node/1966002#comment-7398708 .
//
//  // If the jQuery mobile library is present, load it and run some helping JS.
//  if (($library = libraries_load('jquery-mobile')) && !empty($library['loaded'])) {
//    drupal_add_js(drupal_get_path('module', 'freepager') . '/freepager.js');
//  }
}

/**
 * Implements hook_views_post_render().
 */
function freepager_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  // If we didn't find a match against the current path, there will still be
  // result fetched from the view. To prevent an empty block from being rendered
  // we tweak this result.
  if (isset($view->display_handler->noPathMatch) && $view->display_handler->noPathMatch) {
    $view->result = FALSE;
  }
}

/**
 * Renders a particular row in a view.
 *
 * @see views_plugin_style::render_fields()
 */
function _freepager_render_views_row(ViewExecutable $view, $row_index, $upto = NULL) {
  $rendered_fields = [];
  foreach (array_keys($view->field) as $id) {
    $rendered_fields[$id] = $view->getStyle()->getField($row_index, $id);
    if (isset($upto) && $id == $upto) {
      break;
    }
  }
  return $rendered_fields;
}
